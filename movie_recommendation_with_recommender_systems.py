# -*- coding: utf-8 -*-
"""Movie Recommendation with recommender systems.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dyJjTf0ArjiXTuTsypVE4d3He6_K3v4H

Importing dependencies
"""

import numpy as np
import pandas as pd
import difflib
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():
  print('User uploaded file "{name}" with length {length} bytes'.format(
      name=fn, length=len(uploaded[fn])))

"""Data collection and pre-processing"""

movies_data = pd.read_csv('/content/movies.csv')

movies_data.head()

#row and column count
movies_data.shape

#selecting the relevant features for recommendation
selected_features = ['genres','keywords','tagline','cast','director']
print(selected_features)

#replacing null values with null string
for feature in selected_features:
  movies_data[feature] = movies_data[feature].fillna('')

#combining all the 5 selected features
combined_features = movies_data['genres']+' '+movies_data['keywords']+' '+movies_data['tagline']+' '+movies_data['cast']+' '+movies_data['director']

print(combined_features)

#converting text data into feature vectors
vectorizer = TfidfVectorizer()

feature_vectors = vectorizer.fit_transform(combined_features)

print(feature_vectors)

"""Cosine Similarity"""

#getting the similarity score/similarity confidence value using cosine similarity
similarity = cosine_similarity(feature_vectors)

print(similarity)

print(similarity.shape)

#user input for movie
movie_name = input('Enter your preferred movie: ')

#creating a list of all the movies given in the dataset
list_of_all_titles = movies_data['title'].tolist()
print(list_of_all_titles)

#finding the closest match for the movie name by user input
find_closest_match = difflib.get_close_matches(movie_name, list_of_all_titles)
print(find_closest_match)

close_match = find_closest_match[0]
print(close_match)

#finding the index of the movie with title
movie_index = movies_data[movies_data.title == close_match]['index'].values[0]
print(movie_index)

#fetching list of similar movies
similarity_score = list(enumerate(similarity[movie_index]))
print(similarity_score)

len(similarity)

#sorting the movies based on similarity score
sorted_similar_movies = sorted(similarity_score, key = lambda x:x[1], reverse = True)
print(sorted_similar_movies)

#print name of simnilar movies based on index
print('Suggested Movies: \n')
i=1
for movie in sorted_similar_movies:
  index = movie[0]
  title_from_index = movies_data[movies_data.index == index]['title'].values[0]
  if (i<=10):
    print(i,'.', title_from_index)
    i+=1

"""Movie Recommendation System"""

movie_name = input('Enter your preferred movie: ')
list_of_all_titles = movies_data['title'].tolist()
find_closest_match = difflib.get_close_matches(movie_name, list_of_all_titles)
close_match = find_closest_match[0]
movie_index = movies_data[movies_data.title == close_match]['index'].values[0]
similarity_score = list(enumerate(similarity[movie_index]))
sorted_similar_movies = sorted(similarity_score, key = lambda x:x[1], reverse = True)
print('Suggested Movies: \n')
i=1
for movie in sorted_similar_movies:
  index = movie[0]
  title_from_index = movies_data[movies_data.index == index]['title'].values[0]
  if (i<=10):
    print(i,'.', title_from_index)
    i+=1